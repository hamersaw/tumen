#!/bin/bash

version="0.1.2"
usage="USAGE: $(basename $0) <COMMAND> [ARGS...]
COMMANDS:
    configure <username> <password>     configure the mongodb cluster
    help                                display this menu
    initialize <version>                download mongo binaries
    start                               start the cluster
    stop                                stop the cluster
    version                             print application version"

# compute project directory, binary directory, and hostfile locations
scriptdir="$(dirname $0)"
case $scriptdir in
  /*) 
      projectdir="$scriptdir"
      ;;
  *) 
      projectdir="$(pwd)/$scriptdir"
      ;;
esac

binarydir="$projectdir/bin"
hostfile="$projectdir/etc/hosts.txt"
keyfile="$projectdir/etc/keyfile"

sleeptime="4s"

# execute command
case "$1" in
    configure)
        # check argument length
        (( $# != 3 )) && echo "$usage" && exit 1

        # ensure application is initialized
        [ ! -d $bindir ] && \
            echo "install binaries with 'init' command" && exit 1

        mongo="$projectdir/bin/mongo"

        # generate keyfile
        openssl rand -base64 756 > $keyfile
        chmod 400 $keyfile

        # start configuration and shard servers
        #   with authentication disabled
        $projectdir/sbin/start.sh -c "config" -s
        sleep $sleeptime
        $projectdir/sbin/start.sh -c "shard" -s
        sleep $sleeptime

        # initialize replication sets
        replsets=$(cat $hostfile | grep 'config\|shard' \
            | awk '{print $4}' | sort | uniq)
        for replset in $replsets; do
            unset primaryaddress members options
            nodeid=0
            while read line; do
                # parse application, ip address, and port from line
                application=$(echo $line | awk '{print $2}')
                ip=$(echo $line | awk '{print $2}')
                port=$(echo $line | awk '{print $3}')

                # set primary address and options
                [ -z "$primaryaddress" ] && primaryaddress="$ip:$port"
                [ -z "$options" ] && [ "$application" == "config" ] \
                    && options=", configsvr:true"

                # append to members
                [ ! -z "$members" ] && members="$members,"
                members="$members{_id:$nodeid,host:\"$ip:$port\"}"

                # increment node id
                (( nodeid += 1 ))
            done < <(grep "$replset" $hostfile)

            $mongo $primaryaddress --eval "rs.initiate({_id:\"$replset\"$options, members:[$members]})"
            sleep $sleeptime
        done

        # create administrator user
        line=$(cat $hostfile | grep "config" | head -n 1)
        ip=$(echo $line | awk '{print $2}')
        port=$(echo $line | awk '{print $3}')

        $mongo $ip:$port/admin --eval "db.createUser({user: \"$2\", pwd: \"$3\", roles:[{role: \"root\", db: \"admin\"}]})"

        # start query routers with authentication disabled
        $projectdir/sbin/start.sh -c "router" -s
        sleep $sleeptime

        # register shards with query routers
        replsets=$(cat $hostfile | grep 'shard' \
            | awk '{print $4}' | sort | uniq)
        for replset in $replsets; do
            unset members
            while read line; do
                # parse ip address and port from line
                ip=$(echo $line | awk '{print $2}')
                port=$(echo $line | awk '{print $3}')

                # append to members
                [ ! -z "$members" ] && members="$members,"
                members="$members$ip:$port"
            done < <(grep "$replset" $hostfile)

            shard="$replset/$members"

            while read line; do
                # parse ip address and port from line
                ip=$(echo $line | awk '{print $2}')
                port=$(echo $line | awk '{print $3}')

                $mongo $ip:$port --eval "sh.addShard(\"$shard\")"
                sleep $sleeptime
            done < <(grep "router" $hostfile)
        done

        # stop query routers, shard servers, and configuration servers
        $projectdir/sbin/stop.sh -c "router"
        sleep $sleeptime
        $projectdir/sbin/stop.sh -c "shard"
        sleep $sleeptime
        $projectdir/sbin/stop.sh -c "config"
        sleep $sleeptime

        ;;
    help)
        echo "$usage"
        exit 0
        ;;
    initialize)
        # check if already initailized
        [ -d "$binarydir" ] && \
            echo "application already initialized" && exit 1

        # check argument length
        (( $# != 2 )) && echo "$usage" && exit 1

        # identify binary release based on linux distribution
        [ ! -f "/etc/os-release" ] && \
            echo "failed to find '/etc/os-release' file" && exit 1

        . /etc/os-release
        case "$ID:$VERSION_ID" in
            debian:10)
                version="mongodb-linux-x86_64-debian10-$2"
                ;;
            fedora:31)
                version="mongodb-linux-x86_64-rehl70-$2"
                ;;
            *)
                echo "unsupported distribution '$ID:$VERSION_ID'"
                exit 1
                ;;
        esac

        # initialize instance variables
        downloaddir="/tmp"

        # download mongo archive
        if [ ! -f "$downloaddir/$version.tgz" ]; then
            wget https://fastdl.mongodb.org/linux/$version.tgz \
                --directory-prefix=$downloaddir

            if [ $? -ne 0 ]; then
                echo "failed to download binary release '$version'."
                exit 1
            else
        fi

        # extract files
        tar xvf "$downloaddir/$version.tgz" -C "$downloaddir"

        # copy mongo binaries and documentation
        mkdir -p $binarydir
        find $downloaddir/$version -type f | \
            xargs -I {} cp {} $binarydir

        # cleanup
        rm -r "$downloaddir/$version"
        rm "$downloaddir/$version.tgz"
        ;;
    start)
        # ensure application is initialized
        [ ! -d $bindir ] && \
            echo "install binaries with 'init' command" && exit 1

        # stop components individually per mongodb documentation
        $projectdir/sbin/start.sh -c "config"
        sleep $sleeptime
        $projectdir/sbin/start.sh -c "shard"
        sleep $sleeptime
        $projectdir/sbin/start.sh -c "router"
        sleep $sleeptime
        ;;
    stop)
        # stop components individually per mongodb documentation
        $projectdir/sbin/stop.sh -c "router"
        sleep $sleeptime
        $projectdir/sbin/stop.sh -c "shard"
        sleep $sleeptime
        $projectdir/sbin/stop.sh -c "config"
        sleep $sleeptime
        ;;
    version)
        echo "v$version"
        exit 0
        ;;
    *)
        echo "unknown command '$1' -- see 'help' menu"
        exit 1
        ;;
esac
