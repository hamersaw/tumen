#!/bin/bash

version="0.1.0"
usage="USAGE: $(basename $0) <COMMAND> [ARGS...]
COMMANDS:
    (config | configure)    configure the mongodb cluster
    help                    display this menu
    (init | initialize)     download mongo binaries
    start                   start the cluster
    stop                    stop the cluster
    version                 print application version"

# compute project directory, binary directory, and hostfile locations
scriptdir="$(dirname $0)"
case $scriptdir in
  /*) 
      projectdir="$scriptdir"
      ;;
  *) 
      projectdir="$(pwd)/$scriptdir"
      ;;
esac

binarydir="$projectdir/bin"
hostfile="$projectdir/etc/hosts.txt"

# execute command
case "$1" in
    config|configure)
        # ensure application is initialized
        [ ! -d $bindir ] && \
            echo "install binaries with 'init' command" && exit 1

        mongo="$projectdir/bin/mongo"

        # start configuration and shard servers
        #   with authentication disabled
        $projectdir/sbin/start.sh -c "config" -d
        $projectdir/sbin/start.sh -c "shard" -d

        sleep 5s

        # initialize replication sets
        replsets=$(cat $hostfile | grep 'config\|shard' \
            | awk '{print $4}' | sort | uniq)
        for replset in $replsets; do
            unset primaryaddress members options
            nodeid=0
            while read line; do
                # parse application, ip address, and port from line
                application=$(echo $line | awk '{print $2}')
                ip=$(echo $line | awk '{print $2}')
                port=$(echo $line | awk '{print $3}')

                # set primary address and options
                [ -z "$primaryaddress" ] && primaryaddress="$ip:$port"
                [ -z "$options" ] && [ "$application" == "config" ] \
                    && options=", configsvr:true"

                # append to members
                [ ! -z "$members" ] && members="$members,"
                members="$members{_id:$nodeid,host:\"$ip:$port\"}"

                # increment node id
                (( nodeid += 1 ))
            done < <(grep "$replset" $hostfile)

            #echo "init $replset"
            #echo "  primaryaddress: $primaryaddress"
            #echo "  members: $members"

            $mongo $primaryaddress --eval "rs.initiate({_id:\"$replset\"$options, members:[$members]})"
            sleep 5s
        done

        # TODO - create admin username and password
        #$mongo $primaryaddress/admin --eval "db.createUser({user: \"mongo-admin\", pwd: \"password\", roles:[{role: \"root\", db: \"admin\"}]})"

        # TODO - register shards with query routers

        # stop configuration and shard servers
        $projectdir/sbin/stop.sh -c "shard"
        $projectdir/sbin/stop.sh -c "config"

        echo "TODO - configure"
        ;;
    help)
        echo "$usage"
        exit 0
        ;;
    init|initialize)
        # check if already initailized
        [ -d "$binarydir" ] && \
            echo "application already initialized" && exit 1

        # initialize instance variables
        downloaddir="$HOME/Downloads"
        # TODO - change binary based on linux distribution
        version="mongodb-linux-x86_64-debian10-4.2.8"

        # download mongo archive
        wget https://fastdl.mongodb.org/linux/$version.tgz \
            --directory-prefix=$downloaddir

        # extract files
        tar xvf "$downloaddir/$version.tgz" -C "$downloaddir"

        # copy mongo binaries and documentation
        mkdir -p $binarydir
        find $downloaddir/$version -type f | \
            xargs -I {} cp {} $binarydir

        # cleanup
        rm -r "$downloaddir/$version"
        rm "$downloaddir/$version.tgz"
        ;;
    start)
        # ensure application is initialized
        [ ! -d $bindir ] && \
            echo "install binaries with 'init' command" && exit 1

        # stop components individually per mongodb documentation
        $projectdir/sbin/start.sh -c "config"
        $projectdir/sbin/start.sh -c "shard"
        $projectdir/sbin/start.sh -c "router"
        ;;
    stop)
        # stop components individually per mongodb documentation
        $projectdir/sbin/stop.sh -c "router"
        $projectdir/sbin/stop.sh -c "shard"
        $projectdir/sbin/stop.sh -c "config"
        ;;
    version)
        echo "v$version"
        exit 0
        ;;
    *)
        echo "unknown command '$1' -- see 'help' menu"
        exit 1
        ;;
esac
